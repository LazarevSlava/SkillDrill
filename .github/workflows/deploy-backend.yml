name: Deploy Backend

on:
  push:
    branches: [main]
    paths:
      - "server/**"
      - "docker-compose.yml"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-backend
      cancel-in-progress: false
    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
      DEPLOY_DIR: /opt/skilldrill
    steps:
      - name: Checkout (context only)
        uses: actions/checkout@v4

      - name: Load SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT:-22}" -H "${DEPLOY_HOST}" >> ~/.ssh/known_hosts

      - name: Deploy (git reset + docker compose up)
        run: |
          ssh -p "${SSH_PORT:-22}" "${DEPLOY_USER}@${DEPLOY_HOST}" << EOF
            set -euo pipefail

            # На всякий: папка проекта
            mkdir -p "\${DEPLOY_DIR}"

            # Снимаем предупреждение "dubious ownership" раз и навсегда
            git config --global --add safe.directory "\${DEPLOY_DIR}"
            git config --global --add safe.directory "\${DEPLOY_DIR}/.git"

            # Опционально: поправить владение, если вдруг было root (не упадём, если нет sudo)
            if command -v sudo >/dev/null 2>&1; then
              sudo chown -R "\${USER}:\${USER}" "\${DEPLOY_DIR}" || true
            fi

            cd "\${DEPLOY_DIR}"

            # Проверяем, что это git-репо (fail-fast с понятным сообщением)
            if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
              echo "::error::\${DEPLOY_DIR} не является git-репозиторием. Один раз клонируй репо на сервер."
              exit 1
            fi

            # Обновляем код
            git fetch --all --prune
            git reset --hard origin/main

            # Пересобираем и поднимаем контейнеры
            docker compose pull || true
            docker compose up -d --build

            # Короткий статус
            docker compose ps

            # Если нужно — раскомментируй healthcheck под свой роут/порт
            # curl -fsS http://127.0.0.1:8080/health || (docker logs --tail=200 skilldrill-api && exit 1)
          EOF
